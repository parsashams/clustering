source('~/github/clustering/CanopyClustering/README.md')
source('~/github/clustering/CanopyClustering/canopy.R')
source('~/github/clustering/CanopyClustering/canopy.R')
source('~/github/clustering/CanopyClustering/canopy.R')
setwd("~/github/clustering/CanopyClustering")
source('~/github/clustering/CanopyClustering/canopy.R')
source('~/github/clustering/CanopyClustering/canopy.R')
??mvnorm
library(MASS)
source('~/github/clustering/CanopyClustering/canopy.R')
setwd("~/github/clustering/Ensembles")
nface = 6000
neye1 = 4000
neye2 = 4000
nmouth = 4000
noutliers = 2000
draw_circle <- function(n,center = c(0,0),maxradius = 1) {
radius <- runif(n,0,maxradius)
theta <- runif(n,0,2*pi)
cbind(center[1] + sqrt(radius) * cos(theta),center[2] + sqrt(radius) * sin(theta))
}
draw_arc <- function(n,thetalimits = c(1.25* pi, 1.75*pi ), radius = .35, jitter = .15) {
radius <- runif(n,radius,radius+jitter)
theta <- runif(n, thetalimits[1], thetalimits[2])
cbind(sqrt(radius) * cos(theta),sqrt(radius) * sin(theta))
}
draw_unif <- function(n, radius = 1) {
cbind( runif(n, -radius, radius), runif(n, -radius, radius) )
}
dataset <- rbind(draw_circle(nface),
draw_circle(neye1,c(-.3,.2),.05),
draw_circle(neye1,c(.3,.2),.05),
draw_arc(nmouth),
draw_unif(noutliers))
labels = factor(
c(rep("face",nface),
rep("eye1",neye1),
rep("eye2",neye2),
rep("mouth",nmouth),
rep("outliers",noutliers)
))
plot(dataset,col=labels,cex=.1)
?runif
str(dataset)
draw_circle(1)
draw_circle(2)
draw_circle(5)
plot(draw_circle(10))
plot(draw_circle(100))
plot(draw_circle(1000))
plot(draw_circle(10))
plot(draw_circle(50))
plot(draw_circle(60))
plot(draw_circle(70))
plot(draw_circle(90))
plot(draw_circle(100))
plot(draw_circle(100))
plot(draw_circle(100))
plot(draw_circle(100))
plot(draw_circle(100))
plot(draw_circle(600))
plot(draw_circle(200))
plot(draw_circle(300))
dataset <- rbind(draw_arc(2000, c(0,2*pi), 6 , .005),
draw_arc(2000, c(0,2*pi), 15 , .005))
plot(dataset)
require(slam)
install.packages(slam)
install.packages("slam")
install.packages("Matrix")
require(slam)
require(Matrix)
remove.packages("Matrix")
install.packages("Matrix", type="source")
install.packages("Matrix", type = "source")
source("../helper.R") #helper functions
require(Matrix)
factor2sparseMatrix <- function(v) {
sparseMatrix(i=1:length(v),j=as.numeric(v),x=1,
dims=c(length(v),nlevels(v)),
dimnames = list(i = names(v), j = levels(v)))
}
as.sparseMatrix <- function(simple_triplet_matrix_sparse) {
retval <-  sparseMatrix(i=as.numeric(simple_triplet_matrix_sparse$i),
j=as.numeric(simple_triplet_matrix_sparse$j),
x=as.numeric(as.character(simple_triplet_matrix_sparse$v)),
dims=c(simple_triplet_matrix_sparse$nrow, simple_triplet_matrix_sparse$ncol),
dimnames = dimnames(simple_triplet_matrix_sparse),
giveCsparse = TRUE)
}
long_to_stm <- function(dtm.long, ivar = "i", jvar = "j", var = "x") {
require(slam)
stm<- simple_triplet_matrix(i=dtm.long[,ivar],j= dtm.long[,jvar],v= dtm.long[,var],
nrow= nlevels(dtm.long[,ivar]), ncol= nlevels(dtm.long[,jvar]),
dimnames = list( ivar= levels(dtm.long[,ivar]), jvar= levels(dtm.long[,jvar]))
)
}
convertcolor <- function(v, ncolors = 20, percentile=FALSE, start="lightgray",end="darkred") {
if (!require("RColorBrewer")) {
install.packages("RColorBrewer")
library(RColorBrewer)
}
scaled <- ifelse( rep(percentile,length(v)),
rank(v)/length(v),
(v - min(v,na.rm=TRUE)) / (max(v,na.rm=TRUE)-min(v,na.rm=TRUE))
)
colfunc <- colorRampPalette(c(start, end))
binned <- cut(scaled, seq(0,1, by = 1/(ncolors)), include.lowest=TRUE, labels = colfunc(ncolors) )
return (as.character(binned))
}
dtm <- data.matrix(dataset)
str(dtm)
?sparseMatrix
